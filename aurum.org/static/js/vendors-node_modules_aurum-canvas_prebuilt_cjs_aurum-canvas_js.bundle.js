"use strict";
(self["webpackChunkaurum_org"] = self["webpackChunkaurum_org"] || []).push([["vendors-node_modules_aurum-canvas_prebuilt_cjs_aurum-canvas_js"],{

/***/ "./node_modules/aurum-canvas/prebuilt/cjs/aurum-canvas.js":
/*!****************************************************************!*\
  !*** ./node_modules/aurum-canvas/prebuilt/cjs/aurum-canvas.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__(/*! ./components/canvas */ "./node_modules/aurum-canvas/prebuilt/cjs/components/canvas.js"), exports);
__exportStar(__webpack_require__(/*! ./components/drawables/aurum_rectangle */ "./node_modules/aurum-canvas/prebuilt/cjs/components/drawables/aurum_rectangle.js"), exports);
__exportStar(__webpack_require__(/*! ./components/drawables/aurum_text */ "./node_modules/aurum-canvas/prebuilt/cjs/components/drawables/aurum_text.js"), exports);
__exportStar(__webpack_require__(/*! ./components/drawables/aurum_line */ "./node_modules/aurum-canvas/prebuilt/cjs/components/drawables/aurum_line.js"), exports);
__exportStar(__webpack_require__(/*! ./components/drawables/aurum_elipse */ "./node_modules/aurum-canvas/prebuilt/cjs/components/drawables/aurum_elipse.js"), exports);
__exportStar(__webpack_require__(/*! ./components/drawables/aurum_group */ "./node_modules/aurum-canvas/prebuilt/cjs/components/drawables/aurum_group.js"), exports);
__exportStar(__webpack_require__(/*! ./components/drawables/aurum_path */ "./node_modules/aurum-canvas/prebuilt/cjs/components/drawables/aurum_path.js"), exports);
__exportStar(__webpack_require__(/*! ./components/drawables/state */ "./node_modules/aurum-canvas/prebuilt/cjs/components/drawables/state.js"), exports);
__exportStar(__webpack_require__(/*! ./components/drawables/aurum_image */ "./node_modules/aurum-canvas/prebuilt/cjs/components/drawables/aurum_image.js"), exports);
__exportStar(__webpack_require__(/*! ./components/drawables/aurum_regular_polygon */ "./node_modules/aurum-canvas/prebuilt/cjs/components/drawables/aurum_regular_polygon.js"), exports);
//# sourceMappingURL=aurum-canvas.js.map

/***/ }),

/***/ "./node_modules/aurum-canvas/prebuilt/cjs/components/canvas.js":
/*!*********************************************************************!*\
  !*** ./node_modules/aurum-canvas/prebuilt/cjs/components/canvas.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AurumCanvas = void 0;
const aurumjs_1 = __webpack_require__(/*! aurumjs */ "./node_modules/aurumjs/prebuilt/cjs/aurumjs.js");
const component_model_1 = __webpack_require__(/*! ./component_model */ "./node_modules/aurum-canvas/prebuilt/cjs/components/component_model.js");
const state_1 = __webpack_require__(/*! ./drawables/state */ "./node_modules/aurum-canvas/prebuilt/cjs/components/drawables/state.js");
const utilities_1 = __webpack_require__(/*! ./utilities */ "./node_modules/aurum-canvas/prebuilt/cjs/components/utilities.js");
const rendering_1 = __webpack_require__(/*! ./rendering */ "./node_modules/aurum-canvas/prebuilt/cjs/components/rendering.js");
const features_1 = __webpack_require__(/*! ./features */ "./node_modules/aurum-canvas/prebuilt/cjs/components/features.js");
const renderCache = new WeakMap();
function AurumCanvas(props, children, api) {
    var _a, _b;
    const lc = (0, aurumjs_1.createLifeCycle)();
    api.synchronizeLifeCycle(lc);
    const components = api.prerender(children, lc);
    let pendingRerender;
    const cancellationToken = new aurumjs_1.CancellationToken();
    let onMouseMove = new aurumjs_1.EventEmitter();
    let onMouseUp = new aurumjs_1.EventEmitter();
    let onMouseDown = new aurumjs_1.EventEmitter();
    return (aurumjs_1.Aurum.factory("canvas", { onAttach: (canvas) => {
            var _a, _b, _c;
            if (props.features) {
                if (!props.scale) {
                    props.scale = new aurumjs_1.DataSource({ x: 1, y: 1 });
                }
                if (!props.translate) {
                    props.translate = new aurumjs_1.DataSource({ x: 0, y: 0 });
                }
                if (props.features.mouseWheelZoom) {
                    (0, features_1.initializeZoomFeature)(props, canvas);
                }
                if ((_a = props.features.panning) === null || _a === void 0 ? void 0 : _a.mouse) {
                    (0, features_1.initializeMousePanningFeature)(props, canvas);
                }
                if ((_b = props.features.panning) === null || _b === void 0 ? void 0 : _b.keyboard) {
                    (0, features_1.initializeKeyboardPanningFeature)(props, canvas);
                }
            }
            if (props.width instanceof aurumjs_1.DataSource) {
                props.width.listen(() => {
                    invalidate(canvas);
                }, api.cancellationToken);
            }
            if (props.backgroundColor instanceof aurumjs_1.DataSource) {
                props.backgroundColor.listen(() => {
                    invalidate(canvas);
                }, api.cancellationToken);
            }
            if (props.height instanceof aurumjs_1.DataSource) {
                props.height.listen(() => {
                    invalidate(canvas);
                }, api.cancellationToken);
            }
            bindCanvas(canvas, components, cancellationToken);
            render(canvas, components);
            if (props.translate) {
                props.translate.transform((0, aurumjs_1.dsUnique)(), api.cancellationToken).listen((v) => {
                    invalidate(canvas);
                });
            }
            if (props.scale) {
                props.scale.transform((0, aurumjs_1.dsUnique)(), api.cancellationToken).listen((v) => {
                    invalidate(canvas);
                });
            }
            (_c = props.onAttach) === null || _c === void 0 ? void 0 : _c.call(props, canvas);
        }, onDetach: () => {
            var _a;
            cancellationToken.cancel();
            (_a = props.onDetach) === null || _a === void 0 ? void 0 : _a.call(props);
        }, style: props.style, class: props.class, width: typeof props.width !== 'object' ? (_a = props.width) === null || _a === void 0 ? void 0 : _a.toString() : props.width.transform((0, aurumjs_1.dsMap)((v) => v.toString())), height: typeof props.height !== 'object' ? (_b = props.height) === null || _b === void 0 ? void 0 : _b.toString() : props.height.transform((0, aurumjs_1.dsMap)((v) => v.toString())) }));
    function bindCanvas(canvas, components, cancellationToken) {
        cancellationToken.registerDomEvent(canvas, 'mouseleave', (e) => {
            onMouseMove.fire(e);
        });
        cancellationToken.registerDomEvent(canvas, 'mousemove', (e) => {
            onMouseMove.fire(e);
        });
        cancellationToken.registerDomEvent(canvas, 'mousedown', (e) => {
            onMouseDown.fire(e);
        });
        cancellationToken.registerDomEvent(canvas, 'mouseup', (e) => {
            onMouseUp.fire(e);
        });
        bind(canvas, components, undefined, cancellationToken);
    }
    function isOnTopOf(e, target, context) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
        if (!target.renderedState) {
            return false;
        }
        let x = e.offsetX - (((_a = props.translate) === null || _a === void 0 ? void 0 : _a.value.x) ? ((_b = props.translate) === null || _b === void 0 ? void 0 : _b.value.x) * ((_e = (_d = (_c = props.scale) === null || _c === void 0 ? void 0 : _c.value) === null || _d === void 0 ? void 0 : _d.x) !== null && _e !== void 0 ? _e : 1) : 0);
        let y = e.offsetY - (((_f = props.translate) === null || _f === void 0 ? void 0 : _f.value.y) ? ((_g = props.translate) === null || _g === void 0 ? void 0 : _g.value.y) * ((_k = (_j = (_h = props.scale) === null || _h === void 0 ? void 0 : _h.value) === null || _j === void 0 ? void 0 : _j.x) !== null && _k !== void 0 ? _k : 1) : 0);
        if (props.scale) {
            x /= props.scale.value.x;
            y /= props.scale.value.y;
        }
        if (target.type === component_model_1.ComponentType.TEXT) {
            const label = target;
            const size = (_l = (0, utilities_1.deref)(label.fontSize)) !== null && _l !== void 0 ? _l : 16;
            if (!label.textBaseline) {
                y += size;
            }
            else {
                switch (label.textBaseline) {
                    case 'bottom':
                        y += size;
                        break;
                    case 'middle':
                        y += size / 2;
                        break;
                    case 'alphabetic':
                        y += size;
                        break;
                }
            }
        }
        switch (target.type) {
            case component_model_1.ComponentType.IMAGE:
            case component_model_1.ComponentType.RECTANGLE:
            case component_model_1.ComponentType.TEXT:
                return (x >= target.renderedState.x &&
                    y >= target.renderedState.y &&
                    x <= target.renderedState.x + target.renderedState.width * ((_o = (_m = props.scale) === null || _m === void 0 ? void 0 : _m.value.x) !== null && _o !== void 0 ? _o : 1) &&
                    y <= target.renderedState.y + target.renderedState.height * ((_q = (_p = props.scale) === null || _p === void 0 ? void 0 : _p.value.y) !== null && _q !== void 0 ? _q : 1));
            case component_model_1.ComponentType.ELIPSE:
            case component_model_1.ComponentType.REGULAR_POLYGON:
                if (!target.renderedState.path) {
                    return false;
                }
                else {
                    return context.isPointInPath(target.renderedState.path, x, y);
                }
            default:
                if (!target.renderedState.path) {
                    return false;
                }
                else {
                    return context.isPointInPath(target.renderedState.path, x - target.renderedState.x, y - target.renderedState.y);
                }
        }
    }
    function bind(canvas, children, parent, cancellationToken) {
        for (const child of children) {
            if (child instanceof aurumjs_1.ArrayDataSource) {
                child.listen(() => invalidate(canvas), cancellationToken);
                const tokenMap = new Map();
                child.listenAndRepeat((change) => {
                    switch (change.operation) {
                        case 'add':
                            for (const item of change.items) {
                                tokenMap.set(item, new aurumjs_1.CancellationToken());
                                bindDynamicEntity(item, child, tokenMap.get(item));
                            }
                            break;
                        case 'remove':
                            for (const item of change.items) {
                                tokenMap.get(item).cancel();
                                tokenMap.delete(item);
                            }
                            break;
                        case 'replace':
                            tokenMap.get(change.target).cancel();
                            tokenMap.delete(change.target);
                            tokenMap.set(change.items[0], new aurumjs_1.CancellationToken());
                            bindDynamicEntity(change.items[0], child, tokenMap.get(change.items[0]));
                            break;
                        case 'swap':
                            break;
                        case 'merge':
                            throw new Error('Operation not supported');
                    }
                });
                continue;
            }
            if (child instanceof aurumjs_1.DataSource || child instanceof aurumjs_1.DuplexDataSource) {
                child.listen(() => invalidate(canvas), cancellationToken);
                let bindToken;
                let value;
                child.listenAndRepeat((newValue) => {
                    if (value !== newValue) {
                        value = newValue;
                        if (bindToken) {
                            bindToken.cancel();
                        }
                        bindToken = new aurumjs_1.CancellationToken();
                        bindDynamicEntity(value, child, bindToken);
                    }
                });
                continue;
            }
            if (child[state_1.stateSymbol]) {
                if (!parent) {
                    throw new Error('Cannot use <State> nodes at root level');
                }
                parent.animations.push(child);
                continue;
            }
            if ('onMouseEnter' in child || 'onMouseLeave' in child) {
                let isInside = false;
                onMouseMove.subscribe((e) => {
                    if (isOnTopOf(e, child, canvas.getContext('2d'))) {
                        if (!isInside && child.onMouseEnter) {
                            child.onMouseEnter(e, child);
                        }
                        isInside = true;
                    }
                    else {
                        if (isInside && child.onMouseLeave) {
                            child.onMouseLeave(e, child);
                        }
                        isInside = false;
                    }
                }, cancellationToken);
            }
            for (const key in child) {
                if (key === 'onMouseUp') {
                    onMouseUp.subscribe((e) => {
                        if (isOnTopOf(e, child, canvas.getContext('2d'))) {
                            child.onMouseUp(e, child);
                        }
                    }, cancellationToken);
                    continue;
                }
                if (key === 'onMouseDown') {
                    onMouseUp.subscribe((e) => {
                        if (isOnTopOf(e, child, canvas.getContext('2d'))) {
                            child.onMouseUp(e, child);
                        }
                    }, cancellationToken);
                    continue;
                }
                if (key === 'onMouseClick') {
                    onMouseUp.subscribe((e) => {
                        if (isOnTopOf(e, child, canvas.getContext('2d'))) {
                            child.onMouseClick(e, child);
                        }
                    }, cancellationToken);
                    continue;
                }
                if (child[key] instanceof aurumjs_1.DataSource) {
                    let value = child[key].value;
                    let lastState;
                    if (key === 'state') {
                        const value = (0, utilities_1.deref)(child[key]);
                        lastState = value;
                        child.animationStates = child.animations.filter((e) => e.id === value);
                        child.animationTime = Date.now();
                    }
                    child[key].listen((newValue) => {
                        if (value !== newValue) {
                            value = newValue;
                            if (key === 'state') {
                                if (lastState !== newValue) {
                                    lastState = newValue;
                                    child.animationStates = child.animations.filter((e) => e.id === newValue);
                                    child.animationTime = Date.now();
                                    invalidate(canvas);
                                }
                            }
                            else {
                                invalidate(canvas);
                            }
                        }
                    }, cancellationToken);
                }
            }
            bind(canvas, child.children, child, cancellationToken);
        }
        function bindDynamicEntity(value, parent, bindToken) {
            const arrayedValue = Array.isArray(value) ? value : [value];
            const lc = (0, aurumjs_1.createLifeCycle)();
            const renderResult = [];
            for (const piece of arrayedValue) {
                if (!piece) {
                    continue;
                }
                if (!renderCache.has(piece)) {
                    renderCache.set(piece, api.prerender(piece, lc));
                }
                renderResult.push(renderCache.get(piece));
            }
            bind(canvas, renderResult, parent, bindToken);
            lc.onAttach();
            bindToken.addCancelable(() => lc.onDetach());
            invalidate(canvas);
        }
    }
    function invalidate(canvas) {
        if (!pendingRerender) {
            pendingRerender = requestAnimationFrame(() => {
                pendingRerender = undefined;
                if (canvas.isConnected) {
                    render(canvas, components);
                }
            });
        }
    }
    function render(canvas, components) {
        const context = canvas.getContext('2d');
        if (props.backgroundColor === undefined) {
            context.clearRect(0, 0, canvas.width, canvas.height);
        }
        else {
            context.fillStyle = (0, utilities_1.deref)(props.backgroundColor);
            context.fillRect(0, 0, canvas.width, canvas.height);
        }
        applyContextTransformation(context);
        for (const child of components) {
            renderChild(context, child, 0, 0);
        }
        unapplyContextTransformation(context);
    }
    function unapplyContextTransformation(context) {
        if (props.scale || props.translate) {
            context.restore();
        }
    }
    function applyContextTransformation(context) {
        var _a, _b;
        if (props.scale || props.translate) {
            context.save();
            if ((_a = props.scale) === null || _a === void 0 ? void 0 : _a.value) {
                context.scale(props.scale.value.x, props.scale.value.y);
            }
            if ((_b = props.translate) === null || _b === void 0 ? void 0 : _b.value) {
                context.translate(props.translate.value.x, props.translate.value.y);
            }
        }
    }
    function renderChild(context, child, offsetX, offsetY) {
        if (child === undefined || child === null) {
            return;
        }
        if (Array.isArray(child)) {
            for (const item of child) {
                renderChild(context, item, offsetX, offsetY);
            }
            return;
        }
        if (child[state_1.stateSymbol]) {
            return;
        }
        if (child[aurumjs_1.aurumElementModelIdentitiy]) {
            if (!renderCache.has(child)) {
                throw new Error('illegal state: unrendered aurum element made it into the canvas render phase');
            }
            child = renderCache.get(child);
        }
        if (child instanceof aurumjs_1.ArrayDataSource) {
            for (const node of child.getData()) {
                renderChild(context, node, offsetX, offsetY);
            }
            return;
        }
        if (child instanceof aurumjs_1.DataSource || child instanceof aurumjs_1.DuplexDataSource) {
            renderChild(context, child.value, offsetX, offsetY);
            return;
        }
        context.save();
        let idle;
        switch (child.type) {
            case component_model_1.ComponentType.PATH:
                idle = (0, rendering_1.renderPath)(context, child, offsetX, offsetY);
                break;
            case component_model_1.ComponentType.REGULAR_POLYGON:
                idle = (0, rendering_1.renderRegularPolygon)(context, child, offsetX, offsetY);
                break;
            case component_model_1.ComponentType.RECTANGLE:
                idle = (0, rendering_1.renderRectangle)(context, child, offsetX, offsetY);
                break;
            case component_model_1.ComponentType.TEXT:
                idle = (0, rendering_1.renderText)(context, child, offsetX, offsetY);
                break;
            case component_model_1.ComponentType.LINE:
                idle = (0, rendering_1.renderLine)(context, child, offsetX, offsetY);
                break;
            case component_model_1.ComponentType.QUADRATIC_CURVE:
                idle = (0, rendering_1.renderQuadraticCurve)(context, child, offsetX, offsetY);
                break;
            case component_model_1.ComponentType.BEZIER_CURVE:
                idle = (0, rendering_1.renderBezierCurve)(context, child, offsetX, offsetY);
                break;
            case component_model_1.ComponentType.ELIPSE:
                idle = (0, rendering_1.renderElipse)(context, child, offsetX, offsetY);
                break;
            case component_model_1.ComponentType.GROUP:
                idle = true;
                break;
        }
        if (!idle) {
            invalidate(context.canvas);
        }
        for (const subChild of child.children) {
            renderChild(context, subChild, (0, utilities_1.deref)(child.x) + offsetX, (0, utilities_1.deref)(child.y) + offsetY);
        }
        context.restore();
    }
}
exports.AurumCanvas = AurumCanvas;
//# sourceMappingURL=canvas.js.map

/***/ }),

/***/ "./node_modules/aurum-canvas/prebuilt/cjs/components/component_model.js":
/*!******************************************************************************!*\
  !*** ./node_modules/aurum-canvas/prebuilt/cjs/components/component_model.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ComponentType = void 0;
var ComponentType;
(function (ComponentType) {
    ComponentType[ComponentType["RECTANGLE"] = 0] = "RECTANGLE";
    ComponentType[ComponentType["ELIPSE"] = 1] = "ELIPSE";
    ComponentType[ComponentType["LINE"] = 2] = "LINE";
    ComponentType[ComponentType["TEXT"] = 3] = "TEXT";
    ComponentType[ComponentType["IMAGE"] = 4] = "IMAGE";
    ComponentType[ComponentType["GROUP"] = 5] = "GROUP";
    ComponentType[ComponentType["STATE"] = 6] = "STATE";
    ComponentType[ComponentType["PATH"] = 7] = "PATH";
    ComponentType[ComponentType["QUADRATIC_CURVE"] = 8] = "QUADRATIC_CURVE";
    ComponentType[ComponentType["BEZIER_CURVE"] = 9] = "BEZIER_CURVE";
    ComponentType[ComponentType["REGULAR_POLYGON"] = 10] = "REGULAR_POLYGON";
})(ComponentType = exports.ComponentType || (exports.ComponentType = {}));
//# sourceMappingURL=component_model.js.map

/***/ }),

/***/ "./node_modules/aurum-canvas/prebuilt/cjs/components/drawables/aurum_elipse.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/aurum-canvas/prebuilt/cjs/components/drawables/aurum_elipse.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AurumElipse = void 0;
const aurumjs_1 = __webpack_require__(/*! aurumjs */ "./node_modules/aurumjs/prebuilt/cjs/aurumjs.js");
const component_model_1 = __webpack_require__(/*! ../component_model */ "./node_modules/aurum-canvas/prebuilt/cjs/components/component_model.js");
function AurumElipse(props, children, api) {
    var _a;
    const lc = (0, aurumjs_1.createLifeCycle)();
    api.synchronizeLifeCycle(lc);
    if (props.onAttach) {
        api.onAttach(() => props.onAttach());
    }
    if (props.onDetach) {
        api.onDetach(() => props.onDetach());
    }
    const components = api.prerender(children, lc).filter((c) => !!c);
    return {
        ...props,
        opacity: (_a = props.opacity) !== null && _a !== void 0 ? _a : 1,
        renderedState: undefined,
        children: components,
        animations: [],
        type: component_model_1.ComponentType.ELIPSE
    };
}
exports.AurumElipse = AurumElipse;
//# sourceMappingURL=aurum_elipse.js.map

/***/ }),

/***/ "./node_modules/aurum-canvas/prebuilt/cjs/components/drawables/aurum_group.js":
/*!************************************************************************************!*\
  !*** ./node_modules/aurum-canvas/prebuilt/cjs/components/drawables/aurum_group.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AurumGroup = void 0;
const aurumjs_1 = __webpack_require__(/*! aurumjs */ "./node_modules/aurumjs/prebuilt/cjs/aurumjs.js");
const component_model_1 = __webpack_require__(/*! ../component_model */ "./node_modules/aurum-canvas/prebuilt/cjs/components/component_model.js");
function AurumGroup(props, children, api) {
    var _a, _b;
    const lc = (0, aurumjs_1.createLifeCycle)();
    api.synchronizeLifeCycle(lc);
    if (props.onAttach) {
        api.onAttach(() => props.onAttach());
    }
    if (props.onDetach) {
        api.onDetach(() => props.onDetach());
    }
    (_a = props.x) !== null && _a !== void 0 ? _a : (props.x = 0);
    (_b = props.y) !== null && _b !== void 0 ? _b : (props.y = 0);
    const components = api.prerender(children, lc).filter((c) => !!c);
    return {
        ...props,
        renderedState: undefined,
        children: components,
        animations: [],
        type: component_model_1.ComponentType.GROUP
    };
}
exports.AurumGroup = AurumGroup;
//# sourceMappingURL=aurum_group.js.map

/***/ }),

/***/ "./node_modules/aurum-canvas/prebuilt/cjs/components/drawables/aurum_image.js":
/*!************************************************************************************!*\
  !*** ./node_modules/aurum-canvas/prebuilt/cjs/components/drawables/aurum_image.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AurumImage = void 0;
const aurumjs_1 = __webpack_require__(/*! aurumjs */ "./node_modules/aurumjs/prebuilt/cjs/aurumjs.js");
const component_model_1 = __webpack_require__(/*! ../component_model */ "./node_modules/aurum-canvas/prebuilt/cjs/components/component_model.js");
function AurumImage(props, children, api) {
    var _a;
    const lc = (0, aurumjs_1.createLifeCycle)();
    api.synchronizeLifeCycle(lc);
    if (props.onAttach) {
        api.onAttach(() => props.onAttach());
    }
    if (props.onDetach) {
        api.onDetach(() => props.onDetach());
    }
    const components = api.prerender(children, lc).filter((c) => !!c);
    return {
        ...props,
        opacity: (_a = props.opacity) !== null && _a !== void 0 ? _a : 1,
        renderedState: undefined,
        children: components,
        animations: [],
        type: component_model_1.ComponentType.IMAGE
    };
}
exports.AurumImage = AurumImage;
//# sourceMappingURL=aurum_image.js.map

/***/ }),

/***/ "./node_modules/aurum-canvas/prebuilt/cjs/components/drawables/aurum_line.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/aurum-canvas/prebuilt/cjs/components/drawables/aurum_line.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AurumLine = void 0;
const aurumjs_1 = __webpack_require__(/*! aurumjs */ "./node_modules/aurumjs/prebuilt/cjs/aurumjs.js");
const component_model_1 = __webpack_require__(/*! ../component_model */ "./node_modules/aurum-canvas/prebuilt/cjs/components/component_model.js");
function AurumLine(props, children, api) {
    var _a, _b;
    const lc = (0, aurumjs_1.createLifeCycle)();
    api.synchronizeLifeCycle(lc);
    if (props.onAttach) {
        api.onAttach(() => props.onAttach());
    }
    if (props.onDetach) {
        api.onDetach(() => props.onDetach());
    }
    const components = api.prerender(children, lc).filter((c) => !!c);
    return {
        ...props,
        opacity: (_a = props.opacity) !== null && _a !== void 0 ? _a : 1,
        lineWidth: (_b = props.lineWidth) !== null && _b !== void 0 ? _b : 1,
        renderedState: undefined,
        children: components,
        animations: [],
        type: component_model_1.ComponentType.LINE
    };
}
exports.AurumLine = AurumLine;
//# sourceMappingURL=aurum_line.js.map

/***/ }),

/***/ "./node_modules/aurum-canvas/prebuilt/cjs/components/drawables/aurum_path.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/aurum-canvas/prebuilt/cjs/components/drawables/aurum_path.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AurumPath = void 0;
const aurumjs_1 = __webpack_require__(/*! aurumjs */ "./node_modules/aurumjs/prebuilt/cjs/aurumjs.js");
const component_model_1 = __webpack_require__(/*! ../component_model */ "./node_modules/aurum-canvas/prebuilt/cjs/components/component_model.js");
function AurumPath(props, children, api) {
    var _a;
    const lc = (0, aurumjs_1.createLifeCycle)();
    api.synchronizeLifeCycle(lc);
    if (props.onAttach) {
        api.onAttach(() => props.onAttach());
    }
    if (props.onDetach) {
        api.onDetach(() => props.onDetach());
    }
    const components = api.prerender(children, lc).filter((c) => !!c);
    return {
        ...props,
        opacity: (_a = props.opacity) !== null && _a !== void 0 ? _a : 1,
        renderedState: undefined,
        children: components,
        animations: [],
        type: component_model_1.ComponentType.PATH
    };
}
exports.AurumPath = AurumPath;
//# sourceMappingURL=aurum_path.js.map

/***/ }),

/***/ "./node_modules/aurum-canvas/prebuilt/cjs/components/drawables/aurum_rectangle.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/aurum-canvas/prebuilt/cjs/components/drawables/aurum_rectangle.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AurumRectangle = void 0;
const aurumjs_1 = __webpack_require__(/*! aurumjs */ "./node_modules/aurumjs/prebuilt/cjs/aurumjs.js");
const component_model_1 = __webpack_require__(/*! ../component_model */ "./node_modules/aurum-canvas/prebuilt/cjs/components/component_model.js");
function AurumRectangle(props, children, api) {
    var _a;
    const lc = (0, aurumjs_1.createLifeCycle)();
    api.synchronizeLifeCycle(lc);
    if (props.onAttach) {
        api.onAttach(() => props.onAttach());
    }
    if (props.onDetach) {
        api.onDetach(() => props.onDetach());
    }
    const components = api.prerender(children, lc).filter((c) => !!c);
    return {
        ...props,
        opacity: (_a = props.opacity) !== null && _a !== void 0 ? _a : 1,
        renderedState: undefined,
        children: components,
        animations: [],
        type: component_model_1.ComponentType.RECTANGLE
    };
}
exports.AurumRectangle = AurumRectangle;
//# sourceMappingURL=aurum_rectangle.js.map

/***/ }),

/***/ "./node_modules/aurum-canvas/prebuilt/cjs/components/drawables/aurum_regular_polygon.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/aurum-canvas/prebuilt/cjs/components/drawables/aurum_regular_polygon.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AurumRegularPolygon = void 0;
const aurumjs_1 = __webpack_require__(/*! aurumjs */ "./node_modules/aurumjs/prebuilt/cjs/aurumjs.js");
const component_model_1 = __webpack_require__(/*! ../component_model */ "./node_modules/aurum-canvas/prebuilt/cjs/components/component_model.js");
function AurumRegularPolygon(props, children, api) {
    var _a;
    const lc = (0, aurumjs_1.createLifeCycle)();
    api.synchronizeLifeCycle(lc);
    if (props.onAttach) {
        api.onAttach(() => props.onAttach());
    }
    if (props.onDetach) {
        api.onDetach(() => props.onDetach());
    }
    const components = api.prerender(children, lc).filter((c) => !!c);
    return {
        ...props,
        opacity: (_a = props.opacity) !== null && _a !== void 0 ? _a : 1,
        renderedState: undefined,
        children: components,
        animations: [],
        type: component_model_1.ComponentType.REGULAR_POLYGON
    };
}
exports.AurumRegularPolygon = AurumRegularPolygon;
//# sourceMappingURL=aurum_regular_polygon.js.map

/***/ }),

/***/ "./node_modules/aurum-canvas/prebuilt/cjs/components/drawables/aurum_text.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/aurum-canvas/prebuilt/cjs/components/drawables/aurum_text.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AurumText = void 0;
const aurumjs_1 = __webpack_require__(/*! aurumjs */ "./node_modules/aurumjs/prebuilt/cjs/aurumjs.js");
const component_model_1 = __webpack_require__(/*! ../component_model */ "./node_modules/aurum-canvas/prebuilt/cjs/components/component_model.js");
function AurumText(props, children, api) {
    var _a;
    const lc = (0, aurumjs_1.createLifeCycle)();
    api.synchronizeLifeCycle(lc);
    if (props.onAttach) {
        api.onAttach(() => props.onAttach());
    }
    if (props.onDetach) {
        api.onDetach(() => props.onDetach());
    }
    const content = api.prerender(children, lc).filter((c) => !!c);
    const text = new aurumjs_1.DataSource('');
    if (props.font instanceof aurumjs_1.DataSource) {
        props.font.listen(() => {
            if (result.renderedState) {
                result.renderedState.lines = [];
            }
        }, api.cancellationToken);
    }
    if (props.fontWeight instanceof aurumjs_1.DataSource) {
        props.fontWeight.listen(() => {
            if (result.renderedState) {
                result.renderedState.lines = [];
            }
        }, api.cancellationToken);
    }
    if (props.fontSize instanceof aurumjs_1.DataSource) {
        props.fontSize.listen(() => {
            if (result.renderedState) {
                result.renderedState.lines = [];
            }
        }, api.cancellationToken);
    }
    if (props.width instanceof aurumjs_1.DataSource) {
        props.width.listen(() => {
            if (result.renderedState) {
                result.renderedState.lines = [];
            }
        }, api.cancellationToken);
    }
    if (props.wrapWidth instanceof aurumjs_1.DataSource) {
        props.wrapWidth.listen(() => {
            if (result.renderedState) {
                result.renderedState.lines = [];
            }
        }, api.cancellationToken);
    }
    for (const i of content) {
        if (i instanceof aurumjs_1.DataSource) {
            i.transform((0, aurumjs_1.dsUnique)(), api.cancellationToken).listen((v) => {
                if (result.renderedState) {
                    result.renderedState.lines = [];
                }
                updateText(text, content);
            });
        }
    }
    updateText(text, content);
    const result = {
        ...props,
        opacity: (_a = props.opacity) !== null && _a !== void 0 ? _a : 1,
        renderedState: undefined,
        text,
        children: [],
        animations: [],
        type: component_model_1.ComponentType.TEXT
    };
    return result;
}
exports.AurumText = AurumText;
function updateText(text, content) {
    text.update(content.reduce((p, c) => {
        if (typeof c === 'string') {
            return `${p}${c}`;
        }
        else {
            if (c.value) {
                return `${p}${c.value}`;
            }
            else {
                return p;
            }
        }
    }, ''));
}
//# sourceMappingURL=aurum_text.js.map

/***/ }),

/***/ "./node_modules/aurum-canvas/prebuilt/cjs/components/drawables/state.js":
/*!******************************************************************************!*\
  !*** ./node_modules/aurum-canvas/prebuilt/cjs/components/drawables/state.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.State = exports.stateSymbol = void 0;
const aurumjs_1 = __webpack_require__(/*! aurumjs */ "./node_modules/aurumjs/prebuilt/cjs/aurumjs.js");
const component_model_1 = __webpack_require__(/*! ../component_model */ "./node_modules/aurum-canvas/prebuilt/cjs/components/component_model.js");
exports.stateSymbol = Symbol('state');
function State(props, children, api) {
    const lc = (0, aurumjs_1.createLifeCycle)();
    api.synchronizeLifeCycle(lc);
    const components = api.prerender(children, lc);
    return {
        [exports.stateSymbol]: true,
        x: undefined,
        y: undefined,
        ...props,
        renderedState: undefined,
        animations: [],
        children: components,
        type: component_model_1.ComponentType.STATE
    };
}
exports.State = State;
//# sourceMappingURL=state.js.map

/***/ }),

/***/ "./node_modules/aurum-canvas/prebuilt/cjs/components/features.js":
/*!***********************************************************************!*\
  !*** ./node_modules/aurum-canvas/prebuilt/cjs/components/features.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.initializeZoomFeature = exports.initializeMousePanningFeature = exports.initializeKeyboardPanningFeature = void 0;
const aurumjs_1 = __webpack_require__(/*! aurumjs */ "./node_modules/aurumjs/prebuilt/cjs/aurumjs.js");
function initializeKeyboardPanningFeature(props, canvas) {
    let moveToken;
    const keyDown = new Set();
    const moveVector = {
        x: 0,
        y: 0
    };
    window.addEventListener('keyup', (e) => {
        if (e.keyCode === props.features.panning.keyboard.leftKeyCode || e.keyCode === props.features.panning.keyboard.rightKeyCode) {
            moveVector.x = 0;
            keyDown.delete(e.keyCode);
        }
        if (e.keyCode === props.features.panning.keyboard.upKeyCode || e.keyCode === props.features.panning.keyboard.downKeyCode) {
            moveVector.y = 0;
            keyDown.delete(e.keyCode);
        }
        if (moveToken && keyDown.size === 0) {
            moveToken.cancel();
            moveToken = undefined;
        }
    });
    window.addEventListener('keydown', (e) => {
        if (e.keyCode === props.features.panning.keyboard.leftKeyCode) {
            moveVector.x = props.features.panning.keyboard.pixelsPerFrame;
            keyDown.add(e.keyCode);
        }
        if (e.keyCode === props.features.panning.keyboard.downKeyCode) {
            moveVector.y = -props.features.panning.keyboard.pixelsPerFrame;
            keyDown.add(e.keyCode);
        }
        if (e.keyCode === props.features.panning.keyboard.rightKeyCode) {
            moveVector.x = -props.features.panning.keyboard.pixelsPerFrame;
            keyDown.add(e.keyCode);
        }
        if (e.keyCode === props.features.panning.keyboard.upKeyCode) {
            moveVector.y = props.features.panning.keyboard.pixelsPerFrame;
            keyDown.add(e.keyCode);
        }
        if (!moveToken && keyDown.size > 0) {
            moveToken = new aurumjs_1.CancellationToken();
            moveToken.animationLoop(() => {
                props.translate.update({
                    x: props.translate.value.x + moveVector.x,
                    y: props.translate.value.y + moveVector.y
                });
            });
        }
    });
}
exports.initializeKeyboardPanningFeature = initializeKeyboardPanningFeature;
function initializeMousePanningFeature(props, canvas) {
    let downX;
    let downY;
    let beforeX;
    let beforeY;
    let down = false;
    canvas.addEventListener('mousedown', (e) => {
        downX = e.clientX;
        downY = e.clientY;
        beforeX = props.translate.value.x;
        beforeY = props.translate.value.y;
        down = true;
    });
    document.addEventListener('mousemove', (e) => {
        if (down) {
            props.translate.update({
                x: beforeX - (downX - e.clientX) / props.scale.value.x,
                y: beforeY - (downY - e.clientY) / props.scale.value.y
            });
        }
    });
    document.addEventListener('mouseup', (e) => {
        down = false;
    });
}
exports.initializeMousePanningFeature = initializeMousePanningFeature;
function initializeZoomFeature(props, canvas) {
    canvas.addEventListener('wheel', (e) => {
        if (e.deltaY > 0) {
            if (props.scale.value.x < props.features.mouseWheelZoom.minZoom) {
                return;
            }
            props.translate.update({
                x: props.translate.value.x + (e.offsetX * (props.features.mouseWheelZoom.zoomIncrements - 1)) / props.scale.value.x,
                y: props.translate.value.y + (e.offsetY * (props.features.mouseWheelZoom.zoomIncrements - 1)) / props.scale.value.y
            });
            props.scale.update({
                x: props.scale.value.x / props.features.mouseWheelZoom.zoomIncrements,
                y: props.scale.value.y / props.features.mouseWheelZoom.zoomIncrements
            });
        }
        else {
            if (props.scale.value.x > props.features.mouseWheelZoom.maxZoom) {
                return;
            }
            props.scale.update({
                x: props.scale.value.x * props.features.mouseWheelZoom.zoomIncrements,
                y: props.scale.value.y * props.features.mouseWheelZoom.zoomIncrements
            });
            props.translate.update({
                x: props.translate.value.x - (e.offsetX * (props.features.mouseWheelZoom.zoomIncrements - 1)) / props.scale.value.x,
                y: props.translate.value.y - (e.offsetY * (props.features.mouseWheelZoom.zoomIncrements - 1)) / props.scale.value.y
            });
        }
    });
}
exports.initializeZoomFeature = initializeZoomFeature;
//# sourceMappingURL=features.js.map

/***/ }),

/***/ "./node_modules/aurum-canvas/prebuilt/cjs/components/rendering.js":
/*!************************************************************************!*\
  !*** ./node_modules/aurum-canvas/prebuilt/cjs/components/rendering.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.resolveValues = exports.renderRectangle = exports.renderText = exports.renderRegularPolygon = exports.renderPath = exports.renderBezierCurve = exports.renderQuadraticCurve = exports.renderLine = exports.renderElipse = void 0;
const utilities_1 = __webpack_require__(/*! ./utilities */ "./node_modules/aurum-canvas/prebuilt/cjs/components/utilities.js");
const regularPolygonKeys = ['x', 'y', 'opacity', 'strokeColor', 'fillColor', 'path', 'sides', 'radius', 'originX', 'originY'];
const pathKeys = ['x', 'y', 'opacity', 'strokeColor', 'fillColor', 'path', 'lineWidth', 'originX', 'originY'];
const elipseKeys = ['x', 'y', 'opacity', 'strokeColor', 'fillColor', 'rotation', 'rx', 'ry', 'startAngle', 'endAngle', 'originX', 'originY'];
const lineKeys = ['x', 'y', 'opacity', 'strokeColor', 'fillColor', 'tx', 'ty', 'lineWidth', 'originX', 'originY'];
const quadraticCurveKeys = ['x', 'y', 'opacity', 'strokeColor', 'fillColor', 'tx', 'ty', 'cx', 'cy', 'lineWidth', 'originX', 'originY'];
const bezierCurveKeys = ['x', 'y', 'opacity', 'strokeColor', 'fillColor', 'tx', 'ty', 'cx', 'cy', 'c2x', 'c2y', 'lineWidth', 'originX', 'originY'];
const textKeys = [
    'x',
    'y',
    'realWidth',
    'width',
    'font',
    'fontSize',
    'opacity',
    'strokeColor',
    'fillColor',
    'text',
    'fontWeight',
    'wrapWidth',
    'lineHeight',
    'textBaseline',
    'originX',
    'originY'
];
const rectangleKeys = ['x', 'y', 'width', 'height', 'opacity', 'strokeColor', 'fillColor', 'originX', 'originY'];
function renderElipse(context, child, offsetX, offsetY) {
    var _a;
    const renderedState = resolveValues(child, elipseKeys, offsetX, offsetY);
    const { x, y, idle, fillColor, strokeColor, opacity, rx, ry, rotation, startAngle, endAngle } = renderedState;
    child.renderedState = renderedState;
    (_a = child.onPreDraw) === null || _a === void 0 ? void 0 : _a.call(child, child.renderedState);
    context.globalAlpha = opacity;
    const path2d = new Path2D();
    if ((fillColor || strokeColor) && rx > 0.01 && ry > 0.01 && (startAngle !== null && startAngle !== void 0 ? startAngle : 0 !== endAngle)) {
        path2d.ellipse(x, y, rx, ry, rotation !== null && rotation !== void 0 ? rotation : 0, startAngle !== null && startAngle !== void 0 ? startAngle : 0, endAngle !== null && endAngle !== void 0 ? endAngle : Math.PI * 2);
        child.renderedState.path = path2d;
    }
    else {
        child.renderedState.path = undefined;
    }
    drawCanvasPath(child, context, path2d, fillColor, strokeColor);
    return idle;
}
exports.renderElipse = renderElipse;
function renderLine(context, child, offsetX, offsetY) {
    var _a;
    const renderedState = resolveValues(child, lineKeys, offsetX, offsetY);
    const { x, y, idle, fillColor, strokeColor, opacity, tx, ty, lineWidth } = renderedState;
    child.renderedState = renderedState;
    (_a = child.onPreDraw) === null || _a === void 0 ? void 0 : _a.call(child, child.renderedState);
    const path2d = new Path2D();
    context.globalAlpha = opacity;
    if (fillColor || strokeColor) {
        path2d.moveTo(x, y);
        path2d.lineTo(tx, ty);
        context.lineWidth = lineWidth;
        child.renderedState.path = path2d;
    }
    else {
        child.renderedState.path = undefined;
    }
    drawCanvasPath(child, context, path2d, fillColor, strokeColor);
    return idle;
}
exports.renderLine = renderLine;
function renderQuadraticCurve(context, child, offsetX, offsetY) {
    var _a;
    const renderedState = resolveValues(child, quadraticCurveKeys, offsetX, offsetY);
    const { x, y, cx, cy, idle, fillColor, strokeColor, opacity, tx, ty, lineWidth } = renderedState;
    child.renderedState = renderedState;
    (_a = child.onPreDraw) === null || _a === void 0 ? void 0 : _a.call(child, child.renderedState);
    context.globalAlpha = opacity;
    const path2d = new Path2D();
    if (fillColor || strokeColor) {
        path2d.moveTo(x, y);
        path2d.quadraticCurveTo(cx, cy, tx, ty);
        context.lineWidth = lineWidth;
        child.renderedState.path = path2d;
    }
    else {
        child.renderedState.path = undefined;
    }
    drawCanvasPath(child, context, path2d, fillColor, strokeColor);
    return idle;
}
exports.renderQuadraticCurve = renderQuadraticCurve;
function renderBezierCurve(context, child, offsetX, offsetY) {
    var _a;
    const renderedState = resolveValues(child, bezierCurveKeys, offsetX, offsetY);
    const { x, y, cx, cy, c2x, c2y, idle, fillColor, strokeColor, opacity, tx, ty, lineWidth } = renderedState;
    child.renderedState = renderedState;
    (_a = child.onPreDraw) === null || _a === void 0 ? void 0 : _a.call(child, child.renderedState);
    context.globalAlpha = opacity;
    const path2d = new Path2D();
    if (fillColor || strokeColor) {
        path2d.moveTo(x, y);
        path2d.bezierCurveTo(cx, cy, c2x, c2y, tx, ty);
        context.lineWidth = lineWidth;
        child.renderedState.path = path2d;
    }
    else {
        child.renderedState.path = undefined;
    }
    drawCanvasPath(child, context, path2d, fillColor, strokeColor);
    return idle;
}
exports.renderBezierCurve = renderBezierCurve;
function drawCanvasPath(child, context, path2d, fillColor, strokeColor) {
    if (child.fillColor) {
        context.fillStyle = fillColor;
        context.fill(path2d);
    }
    if (child.strokeColor) {
        context.strokeStyle = strokeColor;
        context.stroke(path2d);
    }
    if (child.clip) {
        context.clip(path2d);
    }
}
function renderPath(context, child, offsetX, offsetY) {
    var _a;
    const renderedState = resolveValues(child, pathKeys, offsetX, offsetY);
    const { x, y, idle, fillColor, strokeColor, opacity, path, lineWidth } = renderedState;
    child.renderedState = renderedState;
    (_a = child.onPreDraw) === null || _a === void 0 ? void 0 : _a.call(child, child.renderedState);
    let path2d;
    context.globalAlpha = opacity;
    if (fillColor || strokeColor) {
        context.lineWidth = lineWidth;
        path2d = new Path2D(path);
        child.renderedState.path = path2d;
    }
    else {
        child.renderedState.path = undefined;
    }
    if (child.fillColor) {
        context.translate(x, y);
        context.fillStyle = fillColor;
        context.fill(path2d);
        context.translate(-x, -y);
    }
    if (child.strokeColor) {
        context.translate(x, y);
        context.strokeStyle = strokeColor;
        context.stroke(path2d);
        context.translate(-x, -y);
    }
    if (child.clip) {
        context.translate(x, y);
        context.clip(path2d);
        context.translate(-x, -y);
    }
    return idle;
}
exports.renderPath = renderPath;
function renderRegularPolygon(context, child, offsetX, offsetY) {
    var _a;
    const renderedState = resolveValues(child, regularPolygonKeys, offsetX, offsetY);
    const { x, y, idle, fillColor, strokeColor, opacity, sides, radius } = renderedState;
    child.renderedState = renderedState;
    (_a = child.onPreDraw) === null || _a === void 0 ? void 0 : _a.call(child, child.renderedState);
    context.globalAlpha = opacity;
    if (renderedState.sides < 3) {
        return idle;
    }
    const path2d = new Path2D();
    if (fillColor || strokeColor) {
        let angle = 0;
        for (let i = 0; i < sides; i++) {
            angle += Math.PI / (sides / 2);
            const targetX = radius * Math.cos(angle);
            const targetY = radius * Math.sin(angle);
            if (i === 0) {
                path2d.moveTo(targetX + radius + x, targetY + radius + y);
            }
            else {
                path2d.lineTo(targetX + radius + x, targetY + radius + y);
            }
        }
        child.renderedState.path = path2d;
    }
    else {
        child.renderedState.path = undefined;
    }
    drawCanvasPath(child, context, path2d, fillColor, strokeColor);
    return idle;
}
exports.renderRegularPolygon = renderRegularPolygon;
function renderText(context, child, offsetX, offsetY) {
    var _a, _b, _c, _d, _e;
    const renderedState = resolveValues(child, textKeys, offsetX, offsetY, false);
    let { x, y, idle, fontSize = 16, textBaseline, font, fillColor, strokeColor, opacity, text, fontWeight, width, wrapWidth, lineHeight, originX } = renderedState;
    if (((_a = child.renderedState) === null || _a === void 0 ? void 0 : _a.width) && !renderedState.width) {
        renderedState.width = child.renderedState.width;
    }
    if (((_b = child.renderedState) === null || _b === void 0 ? void 0 : _b.realWidth) && !renderedState.realWidth) {
        renderedState.realWidth = child.renderedState.realWidth;
    }
    renderedState.lines = (_c = child.renderedState) === null || _c === void 0 ? void 0 : _c.lines;
    child.renderedState = renderedState;
    child.renderedState.lines = (_d = child.renderedState.lines) !== null && _d !== void 0 ? _d : [];
    let lines = child.renderedState.lines;
    if (textBaseline) {
        context.textBaseline = textBaseline;
    }
    context.font = `${fontWeight ? fontWeight + ' ' : ''}${fontSize}px ${font !== null && font !== void 0 ? font : 'Arial'}`;
    renderedState.height = fontSize;
    if (lines.length === 0) {
        if (wrapWidth) {
            child.renderedState.realWidth = 0;
            const pieces = text.split(' ');
            let line = pieces.shift();
            while (pieces.length) {
                const measuredWidth = context.measureText(line + ' ' + pieces[0]);
                if (measuredWidth.width > child.renderedState.realWidth) {
                    child.renderedState.realWidth = measuredWidth.width;
                }
                if (measuredWidth <= wrapWidth) {
                    line += ' ' + pieces.shift();
                }
                else {
                    lines.push(line);
                    line = pieces.shift();
                }
            }
            lines.push(line);
        }
        else {
            if (!width) {
                child.renderedState.realWidth = child.renderedState.width = context.measureText(text).width;
            }
            else {
                child.renderedState.realWidth = context.measureText(text).width;
            }
            lines.push(text);
        }
    }
    (_e = child.onPreDraw) === null || _e === void 0 ? void 0 : _e.call(child, child.renderedState);
    context.globalAlpha = opacity;
    if (originX) {
        x -= Math.min(child.renderedState.realWidth, child.renderedState.width) * originX;
    }
    for (let i = 0; i < lines.length; i++) {
        if (fillColor) {
            context.fillStyle = fillColor;
            context.fillText(lines[i], x, y + (lineHeight !== null && lineHeight !== void 0 ? lineHeight : 16) * i, width);
        }
        if (strokeColor) {
            context.strokeStyle = strokeColor;
            context.strokeText(lines[i], x, y + (lineHeight !== null && lineHeight !== void 0 ? lineHeight : 16) * i, width);
        }
    }
    return idle;
}
exports.renderText = renderText;
function renderRectangle(context, child, offsetX, offsetY) {
    var _a;
    const renderedState = resolveValues(child, rectangleKeys, offsetX, offsetY);
    const { x, y, width, height, idle, fillColor, strokeColor, opacity } = renderedState;
    child.renderedState = renderedState;
    (_a = child.onPreDraw) === null || _a === void 0 ? void 0 : _a.call(child, child.renderedState);
    if (opacity <= 0 && !child.clip) {
        return idle;
    }
    context.globalAlpha = opacity;
    if (fillColor) {
        context.fillStyle = fillColor;
        context.fillRect(x, y, width, height);
    }
    if (strokeColor) {
        context.strokeStyle = strokeColor;
        context.strokeRect(x, y, width, height);
    }
    if (child.clip) {
        context.beginPath();
        context.rect(x, y, width, height);
        context.clip();
    }
    return idle;
}
exports.renderRectangle = renderRectangle;
function resolveValues(node, props, offsetX, offsetY, applyOrigin = true) {
    var _a;
    const result = {
        idle: true,
        x: 0,
        y: 0
    };
    let idle = true;
    for (const key of props) {
        const baseValue = (0, utilities_1.deref)(node[key]);
        const state = (_a = node.animationStates) === null || _a === void 0 ? void 0 : _a.find((n) => n[key] != undefined);
        if (state) {
            let progress;
            if (!state.transitionTime) {
                progress = 1;
            }
            else {
                progress = Math.min(1, (Date.now() - node.animationTime) / (0, utilities_1.deref)(state.transitionTime));
            }
            const targetValue = state[key];
            result[key] = baseValue + (targetValue - baseValue) * progress;
            if (progress < 1) {
                idle = false;
            }
        }
        else {
            result[key] = baseValue;
        }
    }
    result.x += offsetX;
    result.y += offsetY;
    if (applyOrigin) {
        //@ts-ignore
        if (result.originX && result.width) {
            //@ts-ignore
            result.x -= result.width * result.originX;
        }
        //@ts-ignore
        if (result.originY && result.height) {
            //@ts-ignore
            result.y -= result.height * result.originY;
        }
    }
    if ('tx' in result) {
        //@ts-ignore
        result.tx += offsetX;
    }
    if ('ty' in result) {
        //@ts-ignore
        result.ty += offsetY;
    }
    if ('cx' in result) {
        //@ts-ignore
        result.cx += offsetX;
    }
    if ('cy' in result) {
        //@ts-ignore
        result.cy += offsetY;
    }
    if ('c2x' in result) {
        //@ts-ignore
        result.c2x += offsetX;
    }
    if ('c2y' in result) {
        //@ts-ignore
        result.c2y += offsetY;
    }
    result.idle = idle;
    return result;
}
exports.resolveValues = resolveValues;
//# sourceMappingURL=rendering.js.map

/***/ }),

/***/ "./node_modules/aurum-canvas/prebuilt/cjs/components/utilities.js":
/*!************************************************************************!*\
  !*** ./node_modules/aurum-canvas/prebuilt/cjs/components/utilities.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.deref = void 0;
const aurumjs_1 = __webpack_require__(/*! aurumjs */ "./node_modules/aurumjs/prebuilt/cjs/aurumjs.js");
function deref(source) {
    if (source instanceof aurumjs_1.DataSource) {
        return source.value;
    }
    else {
        return source;
    }
}
exports.deref = deref;
//# sourceMappingURL=utilities.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,